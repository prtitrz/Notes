Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2010-12-13T15:03:41.850781

====== The Python Tutorial ======
Created Monday 13 December 2010

===== 3.1.2. Strings =====
If we make the string literal a “raw” string, \n sequences are not converted to newlines, but the backslash at the end of the line, and the newline character in the source, are both included in the string as data.


==== hello = r"This is a rather long string containing\n\ ====

==== several lines of text much as you would do in C." ====

==== print hello ====
would print:

==== This is a rather long string containing\n\ ====

==== several lines of text much as you would do in C. ====
Indices may be negative numbers, to start counting from the right.
But note that -0 is really the same as 0, so it does not count from the right!

 +---+---+---+---+---+
 | H | e | l | p | A |
 +---+---+---+---+---+
 0   1   2   3   4   5
-5  -4  -3  -2  -1

===== 3.1.4. Lists =====

==== >>> a = ['spam', 'eggs', 100, 1234] ====

==== >>> a ====

==== ['spam', 'eggs', 100, 1234] ====

==== >>> a[0] ====

==== 'spam' ====

==== >>> a[3] ====

==== 1234 ====

==== >>> a[-2] ====

==== 100 ====

==== >>> a[1:-1] ====

==== ['eggs', 100] ====

==== >>> a[:2] + ['bacon', 2*2] ====

==== ['spam', 'eggs', 'bacon', 4] ====

==== >>> 3*a[:3] + ['Boo!'] ====

==== ['spam', 'eggs', 100, 'spam', 'eggs', 100, 'spam', 'eggs', 100, 'Boo!'] ====

===== 4.1. if Statements =====

==== >>> x = int(raw_input("Please enter an integer: ")) ====

==== Please enter an integer: 42 ====

==== >>> if x < 0: ====

==== ...      x = 0 ====

==== ...      print 'Negative changed to zero' ====

==== ... elif x == 0: ====

==== ...      print 'Zero' ====

==== ... elif x == 1: ====

==== ...      print 'Single' ====

==== ... else: ====

==== ...      print 'More' ====

===== 4.2. for Statements =====
It is not safe to modify the sequence being iterated over in the loop (this can only happen for mutable sequence types, such as lists). If you need to modify the list you are iterating over (for example, to duplicate selected items) you must iterate over a copy. The slice notation makes this particularly convenient:

==== >>> a = ['Mary', 'had', 'a', 'little', 'lamb'] ====

==== >>> for x in a[:]: # make a slice copy of the entire list ====

==== ...    if len(x) > 6: a.insert(0, x) ====

==== ... ====

==== >>> a ====

==== ['defenestrate', 'cat', 'window', 'defenestrate'] ====

===== 4.3. The range() Function =====

==== >>> range(5, 10) ====

==== [5, 6, 7, 8, 9] ====

==== >>> range(0, 10, 3) ====

==== [0, 3, 6, 9] ====

==== >>> range(-10, -100, -30) ====

==== [-10, -40, -70] ====
To iterate over the indices of a sequence, you can combine range() and len() as follows:

==== >>> a = ['Mary', 'had', 'a', 'little', 'lamb'] ====

==== >>> for i in range(len(a)): ====

==== ...     print i, a[i] ====
In most such cases, however, it is convenient to use the enumerate() function

===== 4.4. break and continue Statements, and else Clauses on Loops =====
Loop statements may have an else clause; it is executed when the loop terminates through exhaustion of the list (with for) or when the condition becomes false (with while), but not when the loop is terminated by a break statement. This is exemplified by the following loop, which searches for prime numbers:

==== >>> for n in range(2, 10): ====

==== ...     for x in range(2, n): ====

==== ...         if n % x == 0: ====

==== ...             print n, 'equals', x, '*', n/x ====

==== ...             break ====

==== ...     else: ====

==== ...         # loop fell through without finding a factor ====

==== ...         print n, 'is a prime number' ====

===== 4.5. pass Statements =====
The pass statement does nothing. It can be used when a statement is required syntactically but the program requires no action. For example:

==== >>> while True: ====

==== ...     pass  # Busy-wait for keyboard interrupt (Ctrl+C) ====
This is commonly used for creating minimal classes:

==== >>> class MyEmptyClass: ====

==== ...     pass ====
Another place pass can be used is as a place-holder for a function or conditional body when you are working on new code, allowing you to keep thinking at a more abstract level. The pass is silently ignored:

==== >>> def initlog(*args): ====

==== ...     pass   # Remember to implement this! ====

===== 4.6. Defining Functions =====

==== >>> def fib2(n): # return Fibonacci series up to n ====

==== ...     """Return a list containing the Fibonacci series up to n.""" ====

==== ...     result = [] ====

==== ...     a, b = 0, 1 ====

==== ...     while a < n: ====

==== ...         result.append(a)    # see below ====

==== ...         a, b = b, a+b ====

==== ...     return result ====

==== ... ====

==== >>> f100 = fib2(100)    # call it ====

==== >>> f100                # write the result ====

==== [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] ====

===== 4.7.1. Default Argument Values =====

==== def ask_ok(prompt, retries=4, complaint='Yes or no, please!'): ====

==== while True: ====

==== ok = raw_input(prompt) ====

==== if ok in ('y', 'ye', 'yes'): ====

==== return True ====

==== if ok in ('n', 'no', 'nop', 'nope'): ====

==== return False ====

==== retries = retries - 1 ====

==== if retries < 0: ====

==== raise IOError('refusenik user') ====

==== print complaint ====
The default values are evaluated at the point of function definition in the defining scope, so that

==== i = 5 ====


==== def f(arg=i): ====

==== print arg ====

==== i = 6 ====

==== f() ====
will print 5.
Important warning: The default value is evaluated only once. This makes a difference when the default is a mutable object such as a list, dictionary, or instances of most classes. For example, the following function accumulates the arguments passed to it on subsequent calls:

==== def f(a, L=[]): ====

==== L.append(a) ====

==== return L ====

==== print f(1) ====

==== print f(2) ====

==== print f(3) ====
This will print

==== [1] ====

==== [1, 2] ====

==== [1, 2, 3] ====
If you don’t want the default to be shared between subsequent calls, you can write the function like this instead:

==== def f(a, L=None): ====

==== if L is None: ====

==== L = [] ====

==== L.append(a) ====

==== return L ====

===== 4.7.2. Keyword Arguments =====
When a final formal parameter of the form name is present, it receives a dictionary (see Mapping Types — dict) containing all keyword arguments except for those corresponding to a formal parameter. This may be combined with a formal parameter of the form *name (described in the next subsection) which receives a tuple containing the positional arguments beyond the formal parameter list. (*name must occur before name.) For example, if we define a function like this:

==== def cheeseshop(kind, *arguments, **keywords): ====

==== print "-- Do you have any", kind, "?" ====

==== print "-- I'm sorry, we're all out of", kind ====

==== for arg in arguments: ====

==== print arg ====

==== print "-" * 40 ====

==== keys = sorted(keywords.keys()) ====

==== for kw in keys: ====

==== print kw, ":", keywords[kw] ====
It could be called like this:

==== cheeseshop("Limburger", "It's very runny, sir.", ====

==== "It's really very, VERY runny, sir.", ====

==== shopkeeper='Michael Palin', ====

==== client="John Cleese", ====

==== sketch="Cheese Shop Sketch") ====
and of course it would print:

==== -- Do you have any Limburger ? ====

==== -- I'm sorry, we're all out of Limburger ====

==== It's very runny, sir. ====

==== It's really very, VERY runny, sir. ====

==== ---------------------------------------- ====

==== client : John Cleese ====

==== shopkeeper : Michael Palin ====

==== sketch : Cheese Shop Sketch ====

===== 5.1. More on Lists =====
list.append(x)
    Add an item to the end of the list; equivalent to a[len(a):] = [x].
list.extend(L)
    Extend the list by appending all the items in the given list; equivalent to a[len(a):] = L.
list.insert(i, x)
    Insert an item at a given position. The first argument is the index of the element before which to insert, so a.insert(0, x) inserts at the front of the list, and a.insert(len(a), x) is equivalent to a.append(x).
list.remove(x)
    Remove the first item from the list whose value is x. It is an error if there is no such item.
list.pop([i])
    Remove the item at the given position in the list, and return it. If no index is specified, a.pop() removes and returns the last item in the list. (The square brackets around the i in the method signature denote that the parameter is optional, not that you should type square brackets at that position. You will see this notation frequently in the Python Library Reference.)
list.index(x)
    Return the index in the list of the first item whose value is x. It is an error if there is no such item.
list.count(x)
    Return the number of times x appears in the list.
list.sort()
    Sort the items of the list, in place.
list.reverse()
    Reverse the elements of the list, in place.

===== 5.1.1. Using Lists as Stacks =====
The list methods make it very easy to use a list as a stack, where the last element added is the first element retrieved (“last-in, first-out”). To add an item to the top of the stack, use append(). To retrieve an item from the top of the stack, use pop() without an explicit index. 

===== 5.1.2. Using Lists as Queues =====

==== >>> from collections import deque ====

==== >>> queue = deque(["Eric", "John", "Michael"]) ====

==== >>> queue.append("Terry")           # Terry arrives ====

==== >>> queue.append("Graham")          # Graham arrives ====

==== >>> queue.popleft()                 # The first to arrive now leaves ====

==== 'Eric' ====

==== >>> queue.popleft()                 # The second to arrive now leaves ====

==== 'John' ====

==== >>> queue                           # Remaining queue in order of arrival ====

==== deque(['Michael', 'Terry', 'Graham']) ====

===== 5.1.3. Functional Programming Tools =====
There are three built-in functions that are very useful when used with lists: filter(), map(), and reduce().

filter(function, sequence) returns a sequence consisting of those items from the sequence for which function(item) is true. If sequence is a string or tuple, the result will be of the same type; otherwise, it is always a list.

==== >>> def f(x): return x % 2 != 0 and x % 3 != 0 ====

==== ... ====

==== >>> filter(f, range(2, 25)) ====

==== [5, 7, 11, 13, 17, 19, 23] ====
map(function, sequence) calls function(item) for each of the sequence’s items and returns a list of the return values. For example, to compute some cubes:

==== >>> def cube(x): return x*x*x ====

==== ... ====

==== >>> map(cube, range(1, 11)) ====

==== [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000] ====
More than one sequence may be passed; the function must then have as many arguments as there are sequences and is called with the corresponding item from each sequence (or None if some sequence is shorter than another).

==== >>> seq = range(8) ====

==== >>> def add(x, y): return x+y ====

==== ... ====

==== >>> map(add, seq, seq) ====

==== [0, 2, 4, 6, 8, 10, 12, 14] ====
reduce(function, sequence) returns a single value constructed by calling the binary function function on the first two items of the sequence, then on the result and the next item, and so on. For example, to compute the sum of the numbers 1 through 10:

==== >>> def add(x,y): return x+y ====

==== ... ====

==== >>> reduce(add, range(1, 11)) ====

==== 55 ====
If there’s only one item in the sequence, its value is returned; if the sequence is empty, an exception is raised.

A third argument can be passed to indicate the starting value. In this case the starting value is returned for an empty sequence, and the function is first applied to the starting value and the first sequence item, then to the result and the next item, and so on. 

===== 5.1.4. List Comprehensions =====

==== >>> vec = [2, 4, 6] ====

==== >>> [3*x for x in vec if x > 3] ====

==== [12, 18] ====

==== >>> [(x, x**2) for x in vec] ====

==== [(2, 4), (4, 16), (6, 36)] ====

==== >>> vec1 = [2, 4, 6] ====

==== >>> vec2 = [4, 3, -9] ====

==== >>> [x+y for x in vec1 for y in vec2] ====

==== [6, 5, -7, 8, 7, -5, 10, 9, -3] ====

==== >>> [vec1[i]*vec2[i] for i in range(len(vec1))] ====

==== [8, 12, -54] ====

==== >>> [str(round(355/113.0, i)) for i in range(1,6)] ====

==== ['3.1', '3.14', '3.142', '3.1416', '3.14159'] ====

===== 5.1.5. Nested List Comprehensions =====

==== >>> mat = [ ====

==== ...        [1, 2, 3], ====

==== ...        [4, 5, 6], ====

==== ...        [7, 8, 9], ====

==== ...       ] ====

==== >>> print [[row[i] for row in mat] for i in [0, 1, 2]] ====

==== [[1, 4, 7], [2, 5, 8], [3, 6, 9]] ====

==== >>> zip(*mat) ====

==== [(1, 4, 7), (2, 5, 8), (3, 6, 9)] ====

===== 5.2. The del statement =====

==== >>> a = [-1, 1, 66.25, 333, 333, 1234.5] ====

==== >>> del a[0] ====

==== >>> a ====

==== [1, 66.25, 333, 333, 1234.5] ====

==== >>> del a[2:4] ====

==== >>> a ====

==== [1, 66.25, 1234.5] ====

==== >>> del a[:] ====

==== >>> a ====

==== [] ====

==== >>> del a ====
Referencing the name a hereafter is an error (at least until another value is assigned to it). 

===== 5.3. Tuples and Sequences =====
A tuple consists of a number of values separated by commas, for instance:

==== >>> t = 12345, 54321, 'hello!' ====

==== >>> t[0] ====

==== 12345 ====

==== >>> t ====

==== (12345, 54321, 'hello!') ====

==== >>> # Tuples may be nested: ====

==== ... u = t, (1, 2, 3, 4, 5) ====

==== >>> u ====

==== ((12345, 54321, 'hello!'), (1, 2, 3, 4, 5)) ====

==== >>> empty = () ====

==== >>> singleton = 'hello',    # <-- note trailing comma ====

==== >>> len(empty) ====

==== 0 ====

==== >>> len(singleton) ====

==== 1 ====

==== >>> singleton ====

==== ('hello',) ====

==== >>> x, y, z = t ====

===== 5.4. Sets =====

==== >>> basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana'] ====

==== >>> fruit = set(basket)               # create a set without duplicates ====

==== >>> fruit ====

==== set(['orange', 'pear', 'apple', 'banana']) ====

==== >>> 'orange' in fruit                 # fast membership testing ====

==== True ====

==== >>> 'crabgrass' in fruit ====

==== False ====

==== >>> # Demonstrate set operations on unique letters from two words ====

==== ... ====

==== >>> a = set('abracadabra') ====

==== >>> b = set('alacazam') ====

==== >>> a                                  # unique letters in a ====

==== set(['a', 'r', 'b', 'c', 'd']) ====

==== >>> a - b                              # letters in a but not in b ====

==== set(['r', 'd', 'b']) ====

==== >>> a | b                              # letters in either a or b ====

==== set(['a', 'c', 'r', 'd', 'b', 'm', 'z', 'l']) ====

==== >>> a & b                              # letters in both a and b ====

==== set(['a', 'c']) ====

==== >>> a ^ b                              # letters in a or b but not both ====

==== set(['r', 'd', 'b', 'm', 'z', 'l']) ====

===== 5.5. Dictionaries =====

==== >>> tel = {'jack': 4098, 'sape': 4139} ====

==== >>> tel['guido'] = 4127 ====

==== >>> tel ====

==== {'sape': 4139, 'guido': 4127, 'jack': 4098} ====

==== >>> tel['jack'] ====

==== 4098 ====

==== >>> del tel['sape'] ====

==== >>> tel['irv'] = 4127 ====

==== >>> tel ====

==== {'guido': 4127, 'irv': 4127, 'jack': 4098} ====

==== >>> tel.keys() ====

==== ['guido', 'irv', 'jack'] ====

==== >>> 'guido' in tel ====

==== True ====

==== >>> dict([('sape', 4139), ('guido', 4127), ('jack', 4098)]) ====

==== {'sape': 4139, 'jack': 4098, 'guido': 4127} ====

==== >>> dict([(x, x**2) for x in (2, 4, 6)])     # use a list comprehension ====

==== {2: 4, 4: 16, 6: 36} ====

==== >>> dict(sape=4139, guido=4127, jack=4098) ====

==== {'sape': 4139, 'jack': 4098, 'guido': 4127} ====

===== 5.6. Looping Techniques =====

==== >>> knights = {'gallahad': 'the pure', 'robin': 'the brave'} ====

==== >>> for k, v in knights.iteritems(): ====

==== ...     print k, v ====

==== ... ====

==== gallahad the pure ====

==== robin the brave ====

==== >>> for i, v in enumerate(['tic', 'tac', 'toe']): ====

==== ...     print i, v ====

==== ... ====

==== 0 tic ====

==== 1 tac ====

==== 2 toe ====

==== >>> questions = ['name', 'quest', 'favorite color'] ====

==== >>> answers = ['lancelot', 'the holy grail', 'blue'] ====

==== >>> for q, a in zip(questions, answers): ====

==== ...     print 'What is your {0}?  It is {1}.'.format(q, a) ====

==== ... ====

==== What is your name?  It is lancelot. ====

==== What is your quest?  It is the holy grail. ====

==== What is your favorite color?  It is blue. ====

==== >>> for i in reversed(xrange(1,10,2)): ====

==== ...     print i, ====

==== 9 7 5 3 1 ====

==== >>> basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana'] ====

==== >>> for f in sorted(set(basket)): ====

==== ...     print f ====

==== ... ====

==== apple ====

==== banana ====

==== orange ====

==== pear ====

===== 5.7. More on Conditions =====
The comparison operators in and not in check whether a value occurs (does not occur) in a sequence. The operators is and is not compare whether two objects are really the same object; this only matters for mutable objects like lists. All comparison operators have the same priority, which is lower than that of all numerical operators.
Comparisons can be chained. For example, a < b == c tests whether a is less than b and moreover b equals c.
A and not B or C is equivalent to (A and (not B)) or C. As always, parentheses can be used to express the desired composition.
It is possible to assign the result of a comparison or other Boolean expression to a variable. For example,

==== >>> string1, string2, string3 = '', 'Trondheim', 'Hammer Dance' ====

==== >>> non_null = string1 or string2 or string3 ====

==== >>> non_null ====

==== 'Trondheim' ====

===== 5.8. Comparing Sequences and Other Types =====

==== (1, 2, 3)              < (1, 2, 4) ====

==== [1, 2, 3]              < [1, 2, 4] ====

==== 'ABC' < 'C' < 'Pascal' < 'Python' ====

==== (1, 2, 3, 4)           < (1, 2, 4) ====

==== (1, 2)                 < (1, 2, -1) ====

==== (1, 2, 3)             == (1.0, 2.0, 3.0) ====

==== (1, 2, ('aa', 'ab'))   < (1, 2, ('abc', 'a'), 4) ====

===== 6.2. Standard Modules =====

==== >>> import sys ====

==== >>> sys.ps1 ====

==== '>>> ' ====

==== >>> sys.ps2 ====

==== '... ' ====

==== >>> sys.ps1 = 'C> ' ====

==== C> print 'Yuck!' ====

==== Yuck! ====

==== C> ====

==== >>> import sys ====

==== >>> sys.path.append('/ufs/guido/lib/python') ====

===== 6.4. Packages =====

==== import sound.effects.echo ====

==== sound.effects.echo.echofilter(input, output, delay=0.7, atten=4) ====

==== from sound.effects import echo ====

==== echo.echofilter(input, output, delay=0.7, atten=4) ====

==== from sound.effects.echo import echofilter ====

==== echofilter(input, output, delay=0.7, atten=4) ====

===== 6.4.2. Intra-package References =====

==== from . import echo ====

==== from .. import formats ====

==== from ..filters import equalize ====
r

===== 7.1. Fancier Output Formatting =====

==== >>> str(1.0/7.0) ====

==== '0.142857142857' ====

==== >>> repr(1.0/7.0) ====

==== '0.14285714285714285' ====

==== >>> x = 10 * 3.25 ====

==== >>> y = 200 * 200 ====

==== >>> s = 'The value of x is ' + repr(x) + ', and y is ' + repr(y) + '...' ====

==== >>> print s ====

==== The value of x is 32.5, and y is 40000... ====

==== >>> # The repr() of a string adds string quotes and backslashes: ====

==== ... hello = 'hello, world\n' ====

==== >>> hellos = repr(hello) ====

==== >>> print hellos ====

==== 'hello, world\n' ====

==== >>> # The argument to repr() may be any Python object: ====

==== ... repr((x, y, ('spam', 'eggs'))) ====

==== "(32.5, 40000, ('spam', 'eggs'))" ====

==== >>> for x in range(1, 11): ====

==== ...     print repr(x).rjust(2), repr(x*x).rjust(3), ====

==== ...     # Note trailing comma on previous line ====

==== ...     print repr(x*x*x).rjust(4) ====

==== ... ====

==== 1   1    1 ====

==== 2   4    8 ====

==== 3   9   27 ====

==== 4  16   64 ====

==== 5  25  125 ====

==== 6  36  216 ====

==== 7  49  343 ====

==== 8  64  512 ====

==== 9  81  729 ====

==== 10 100 1000 ====

==== >>> for x in range(1,11): ====

==== ...     print '{0:2d} {1:3d} {2:4d}'.format(x, x*x, x*x*x) ====

==== ... ====

==== 1   1    1 ====

==== 2   4    8 ====

==== 3   9   27 ====

==== 4  16   64 ====

==== 5  25  125 ====

==== 6  36  216 ====

==== 7  49  343 ====

==== 8  64  512 ====

==== 9  81  729 ====

==== 10 100 1000 ====
This example demonstrates the rjust() method of string objects, which right-justifies a string in a field of a given width by padding it with spaces on the left. There are similar methods ljust() and center(). These methods do not write anything, they just return a new string. If the input string is too long, they don’t truncate it, but return it unchanged; this will mess up your column lay-out but that’s usually better than the alternative, which would be lying about a value. (If you really want truncation you can always add a slice operation, as in x.ljust(n)[:n].)

==== >>> '12'.zfill(5) ====

==== '00012' ====

==== >>> '-3.14'.zfill(7) ====

==== '-003.14' ====

==== >>> '3.14159265359'.zfill(5) ====

==== '3.14159265359' ====

==== >>> print '{0} and {1}'.format('spam', 'eggs') ====

==== spam and eggs ====

==== >>> print '{1} and {0}'.format('spam', 'eggs') ====

==== eggs and spam ====

==== >>> print 'The story of {0}, {1}, and {other}.'.format('Bill', 'Manfred', ====

==== ...                                                    other='Georg') ====

==== The story of Bill, Manfred, and Georg. ====

'!s' (apply str()) and '!r' (apply repr()) can be used to convert the value before it is formatted.

==== >>> import math ====

==== >>> print 'The value of PI is approximately {}.'.format(math.pi) ====

==== The value of PI is approximately 3.14159265359. ====

==== >>> print 'The value of PI is approximately {!r}.'.format(math.pi) ====

==== The value of PI is approximately 3.141592653589793. ====

==== >>> print 'The value of PI is approximately {0:.3f}.'.format(math.pi) ====

==== The value of PI is approximately 3.142. ====

==== >>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 7678} ====

==== >>> for name, phone in table.items(): ====

==== ...     print '{0:10} ==> {1:10d}'.format(name, phone) ====

==== ... ====

==== Jack       ==>       4098 ====

==== Dcab       ==>       7678 ====

==== Sjoerd     ==>       4127 ====

==== >>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678} ====

==== >>> print ('Jack: {0[Jack]:d}; Sjoerd: {0[Sjoerd]:d}; ' ====

==== ...        'Dcab: {0[Dcab]:d}'.format(table)) ====

==== Jack: 4098; Sjoerd: 4127; Dcab: 8637678 ====

==== >>> print 'Jack: {Jack:d}; Sjoerd: {Sjoerd:d}; Dcab: {Dcab:d}'.format(**table) ====

==== Jack: 4098; Sjoerd: 4127; Dcab: 8637678 ====

===== 7.2. Reading and Writing Files =====
The first argument is a string containing the filename. The second argument is another string containing a few characters describing the way in which the file will be used. mode can be 'r' when the file will only be read, 'w' for only writing (an existing file with the same name will be erased), and 'a' opens the file for appending; any data written to the file is automatically added to the end. 'r+' opens the file for both reading and writing. The mode argument is optional; 'r' will be assumed if it’s omitted.

===== 7.2.1. Methods of File Objects =====

==== >>> f.read() ====

==== 'This is the entire file.\n' ====

==== >>> f.read() ====

==== '' ====

==== >>> f.readline() ====

==== 'This is the first line of the file.\n' ====

==== >>> f.readline() ====

==== 'Second line of the file\n' ====

==== >>> f.readline() ====

==== '' ====

==== >>> f.readlines() ====

==== ['This is the first line of the file.\n', 'Second line of the file\n'] ====

==== >>> for line in f: ====

==== print line, ====

==== This is the first line of the file. ====

==== Second line of the file ====

==== >>> f.write('This is a test\n') ====

==== >>> value = ('the answer', 42) ====

==== >>> s = str(value) ====

==== >>> f.write(s) ====
f.tell() returns an integer giving the file object’s current position in the file, measured in bytes from the beginning of the file. To change the file object’s position, use f.seek(offset, from_what). The position is computed from adding offset to a reference point; the reference point is selected by the from_what argument. A from_what value of 0 measures from the beginning of the file, 1 uses the current file position, and 2 uses the end of the file as the reference point. from_what can be omitted and defaults to 0, using the beginning of the file as the reference point.


==== >>> f = open('/tmp/workfile', 'r+') ====

==== >>> f.write('0123456789abcdef') ====

==== >>> f.seek(5)     # Go to the 6th byte in the file ====

==== >>> f.read(1) ====

==== '5' ====

==== >>> f.seek(-3, 2) # Go to the 3rd byte before the end ====

==== >>> f.read(1) ====

==== 'd' ====

==== >>> f.close() ====


==== >>> with open('/tmp/workfile', 'r') as f: ====

==== ...     read_data = f.read() ====

==== >>> f.closed ====

==== True ====

===== 7.2.2. The pickle Module =====
Rather than have users be constantly writing and debugging code to save complicated data types, Python provides a standard module called pickle. This is an amazing module that can take almost any Python object (even some forms of Python code!), and convert it to a string representation; this process is called pickling. Reconstructing the object from the string representation is called unpickling. Between pickling and unpickling, the string representing the object may have been stored in a file or data, or sent over a network connection to some distant machine.

If you have an object x, and a file object f that’s been opened for writing, the simplest way to pickle the object takes only one line of code:

==== pickle.dump(x, f) ====
To unpickle the object again, if f is a file object which has been opened for reading:

==== x = pickle.load(f) ====

===== 8.3. Handling Exceptions =====

==== >>> while True: ====

==== ...     try: ====

==== ...         x = int(raw_input("Please enter a number: ")) ====

==== ...         break ====

==== ...     except ValueError: ====

==== ...         print "Oops!  That was no valid number.  Try again..." ====

==== ... ====

==== ... except (RuntimeError, TypeError, NameError): ====

==== ...     pass ====

==== import sys ====

==== try: ====

==== f = open('myfile.txt') ====

==== s = f.readline() ====

==== i = int(s.strip()) ====

==== except IOError as (errno, strerror): ====

==== print "I/O error({0}): {1}".format(errno, strerror) ====

==== except ValueError: ====

==== print "Could not convert data to an integer." ====

==== except: ====

==== print "Unexpected error:", sys.exc_info()[0] ====

==== raise ====

.............................................................



===== 8.6. Defining Clean-up Actions =====

==== >>> def divide(x, y): ====

==== ...     try: ====

==== ...         result = x / y ====

==== ...     except ZeroDivisionError: ====

==== ...         print "division by zero!" ====

==== ...     else: ====

==== ...         print "result is", result ====

==== ...     finally: ====

==== ...         print "executing finally clause" ====

==== ... ====

==== >>> divide(2, 1) ====

==== result is 2 ====

==== executing finally clause ====

==== >>> divide(2, 0) ====

==== division by zero! ====

==== executing finally clause ====

==== >>> divide("2", "1") ====

==== executing finally clause ====

==== Traceback (most recent call last): ====

==== File "<stdin>", line 1, in ? ====

==== File "<stdin>", line 3, in divide ====

==== TypeError: unsupported operand type(s) for /: 'str' and 'str' ====

==== with open("myfile.txt") as f: ====

==== for line in f: ====

==== print line ====

===== 9.3.2. Class Objects =====

==== >>> class Complex: ====

==== ...     def __init__(self, realpart, imagpart): ====

==== ...         self.r = realpart ====

==== ...         self.i = imagpart ====

==== ... ====

==== >>> x = Complex(3.0, -4.5) ====

==== >>> x.r, x.i ====

==== (3.0, -4.5) ====

===== 9.4. Random Remarks =====

==== class Bag: ====

==== def __init__(self): ====

==== self.data = [] ====

==== def add(self, x): ====

==== self.data.append(x) ====

==== def addtwice(self, x): ====

==== self.add(x) ====

==== self.add(x) ====

===== 9.7. Odds and Ends =====

==== class Employee: ====

==== pass ====

==== john = Employee() # Create an empty employee record ====

==== # Fill the fields of the record ====

==== john.name = 'John Doe' ====

==== john.dept = 'computer lab' ====

==== john.salary = 1000 ====

===== 9.8. Exceptions Are Classes Too =====
the following code will print B, C, D in that order:

==== class B: ====

==== pass ====

==== class C(B): ====

==== pass ====

==== class D(C): ====

==== pass ====

==== for c in [B, C, D]: ====

==== try: ====

==== raise c() ====

==== except D: ====

==== print "D" ====

==== except C: ====

==== print "C" ====

==== except B: ====

==== print "B" ====
Note that if the except clauses were reversed (with except B first), it would have printed B, B, B — the first matching except clause is triggered.

===== 9.9. Iterators =====

==== >>> s = 'abc' ====

==== >>> it = iter(s) ====

==== >>> it ====

==== <iterator object at 0x00A1DB50> ====

==== >>> it.next() ====

==== 'a' ====

==== >>> it.next() ====

==== 'b' ====

==== >>> it.next() ====

==== 'c' ====

==== >>> it.next() ====

==== Traceback (most recent call last): ====

==== File "<stdin>", line 1, in ? ====

==== it.next() ====

==== StopIteration ====

==== class Reverse: ====

==== "Iterator for looping over a sequence backwards" ====

==== def __init__(self, data): ====

==== self.data = data ====

==== self.index = len(data) ====

==== def __iter__(self): ====

==== return self ====

==== def next(self): ====

==== if self.index == 0: ====

==== raise StopIteration ====

==== self.index = self.index - 1 ====

==== return self.data[self.index] ====

==== >>> rev = Reverse('spam') ====

==== >>> iter(rev) ====

==== <__main__.Reverse object at 0x00A1DB50> ====

==== >>> for char in rev: ====

==== ...     print char ====

==== ... ====

==== m ====

==== a ====

==== p ====

==== s ====

===== 9.10. Generators =====

==== def reverse(data): ====

==== for index in range(len(data)-1, -1, -1): ====

==== yield data[index] ====

==== >>> for char in reverse('golf'): ====

==== ...     print char ====

==== ... ====

==== f ====

==== l ====

==== o ====

==== g ====

===== 9.11. Generator Expressions =====

==== >>> sum(i*i for i in range(10))                 # sum of squares ====

==== 285 ====

==== >>> xvec = [10, 20, 30] ====

==== >>> yvec = [7, 5, 3] ====

==== >>> sum(x*y for x,y in zip(xvec, yvec))         # dot product ====

==== 260 ====

==== >>> from math import pi, sin ====

==== >>> sine_table = dict((x, sin(x*pi/180)) for x in range(0, 91)) ====


==== >>> unique_words = set(word  for line in page  for word in line.split()) ====


==== >>> valedictorian = max((student.gpa, student.name) for student in graduates) ====

==== >>> data = 'golf' ====

==== >>> list(data[i] for i in range(len(data)-1,-1,-1)) ====

==== ['f', 'l', 'o', 'g'] ====

===== 10.1. Operating System Interface =====

==== >>> import os ====

==== >>> os.getcwd()      # Return the current working directory ====

==== 'C:\\Python26' ====

==== >>> os.chdir('/server/accesslogs')   # Change current working directory ====

==== >>> os.system('mkdir today')   # Run the command mkdir in the system shell ====

==== 0 ====

==== >>> import os ====

==== >>> dir(os) ====

==== <returns a list of all module functions> ====

==== >>> help(os) ====

==== <returns an extensive manual page created from the module's docstrings> ====

==== >>> import shutil ====

==== >>> shutil.copyfile('data.db', 'archive.db') ====

==== >>> shutil.move('/build/executables', 'installdir') ====

===== 10.2. File Wildcards =====

==== >>> import glob ====

==== >>> glob.glob('*.py') ====

==== ['primes.py', 'random.py', 'quote.py'] ====

===== 10.5. String Pattern Matching =====


==== >>> import re ====

==== >>> re.findall(r'\bf[a-z]*', 'which foot or hand fell fastest') ====

==== ['foot', 'fell', 'fastest'] ====

==== >>> re.sub(r'(\b[a-z]+) \1', r'\1', 'cat in the the hat') ====

==== 'cat in the hat' ====


==== >>> 'tea for too'.replace('too', 'two') ====

==== 'tea for two' ====

===== 10.6. Mathematics =====

==== >>> import random ====

==== >>> random.choice(['apple', 'pear', 'banana']) ====

==== 'apple' ====

==== >>> random.sample(xrange(100), 10)   # sampling without replacement ====

==== [30, 83, 16, 4, 8, 81, 41, 50, 18, 33] ====

==== >>> random.random()    # random float ====

==== 0.17970987693706186 ====

==== >>> random.randrange(6)    # random integer chosen from range(6) ====

==== 4 ====

===== 10.7. Internet Access =====

==== >>> import urllib2 ====

==== >>> for line in urllib2.urlopen('http://tycho.usno.navy.mil/cgi-bin/timer.pl'): ====

==== ...     if 'EST' in line or 'EDT' in line:  # look for Eastern Time ====

==== ...         print line ====

==== <BR>Nov. 25, 09:43:32 PM EST ====

==== >>> import smtplib ====

==== >>> server = smtplib.SMTP('localhost') ====

==== >>> server.sendmail('soothsayer@example.org', 'jcaesar@example.org', ====

==== ... """To: jcaesar@example.org ====

==== ... From: soothsayer@example.org ====

==== ... ====

==== ... Beware the Ides of March. ====

==== ... """) ====

==== >>> server.quit() ====


===== 10.8. Dates and Times =====


==== >>> # dates are easily constructed and formatted ====

==== >>> from datetime import date ====

==== >>> now = date.today() ====

==== >>> now ====

==== datetime.date(2003, 12, 2) ====

==== >>> now.strftime("%m-%d-%y. %d %b %Y is a %A on the %d day of %B.") ====

==== '12-02-03. 02 Dec 2003 is a Tuesday on the 02 day of December.' ====

==== >>> # dates support calendar arithmetic ====

==== >>> birthday = date(1964, 7, 31) ====

==== >>> age = now - birthday ====

==== >>> age.days ====

==== 14368 ====

===== 10.9. Data Compression =====
Common data archiving and compression formats are directly supported by modules including: zlib, gzip, bz2, zipfile and tarfile.

==== >>> import zlib ====

==== >>> s = 'witch which has which witches wrist watch' ====

==== >>> len(s) ====

==== 41 ====

==== >>> t = zlib.compress(s) ====

==== >>> len(t) ====

==== 37 ====

==== >>> zlib.decompress(t) ====

==== 'witch which has which witches wrist watch' ====

==== >>> zlib.crc32(s) ====

==== 226805979 ====

===== 10.10. Performance Measurement =====

===== 10.11. Quality Control =====

==== def average(values): ====

==== """Computes the arithmetic mean of a list of numbers. ====

==== >>> print average([20, 30, 70]) ====

==== 40.0 ====

==== """ ====

==== return sum(values, 0.0) / len(values) ====

==== import doctest ====

==== doctest.testmod()   # automatically validate the embedded tests ====

==== import unittest ====

==== class TestStatisticalFunctions(unittest.TestCase): ====

==== def test_average(self): ====

==== self.assertEqual(average([20, 30, 70]), 40.0) ====

==== self.assertEqual(round(average([1, 5, 7]), 1), 4.3) ====

==== self.assertRaises(ZeroDivisionError, average, []) ====

==== self.assertRaises(TypeError, average, 20, 30, 70) ====

==== unittest.main() # Calling from the command line invokes all tests ====

===== 11.1. Output Formatting =====

===== 11.2. Templating =====

==== >>> t = Template('Return the $item to $owner.') ====

==== >>> d = dict(item='unladen swallow') ====

==== >>> t.substitute(d) ====

==== Traceback (most recent call last): ====

==== . . . ====

==== KeyError: 'owner' ====

==== >>> t.safe_substitute(d) ====

==== 'Return the unladen swallow to $owner.' ====

===== 11.3. Working with Binary Data Record Layouts =====

===== 11.4. Multi-threading =====

===== 11.5. Logging =====

===== 11.6. Weak References =====

===== 11.7. Tools for Working with Lists =====

===== 11.8. Decimal Floating Point Arithmetic =====
