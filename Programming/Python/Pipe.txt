Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-04-07T00:27:42.608344

====== Pipe ======
Created Thursday 07 April 2011

注：本文基本上是翻译这篇文章（http://dev-tricks.net/pipe-infix-syntax-for-python）。

通过 Pipe 模块，就能够使用 Python 用上中缀语法。

首先来看一下传统前缀语法的代码：

view plaincopy to clipboardprint?

   1. sum(select(where(take_while(fib(), lambda x: x < 1000000) lambda x: x % 2), lambda x: x * x))  

sum(select(where(take_while(fib(), lambda x: x < 1000000) lambda x: x % 2), lambda x: x * x))

很难读？再来看看中缀语法代码：

view plaincopy to clipboardprint?

   1. fib() | take_while(lambda x: x < 1000000)  
   2.       | where(lambda x: x % 2)  
   3.       | select(lambda x: x * x)  
   4.       | sum()  

fib() | take_while(lambda x: x < 1000000) | where(lambda x: x % 2) | select(lambda x: x * x) | sum()

好读多了吧？

虽然 Pipe 基类的代码很少，但很强大，能够让你很容易写出 pipeable 函数哦。而且这个模块本身就带了超过 30 个已经写好的函数，比如 ‘where’, ‘group_by’, ‘sort’, ‘take_while’ …

如果想一下 Pipe，需要先安装，在命令行执行：

view plaincopy to clipboardprint?

   1. easy_install -U pipe  

easy_install -U pipe

然后等着安装完成就行了。现在可以打开一个交互式 Shell，来试一下：

view plaincopy to clipboardprint?

   1. >>> from pipe import *  
   2. >>> [1, 2, 3, 4, 5] | add  
   3. 15  
   4. >>> [5, 4, 3, 2, 1] | sort  
   5. [1, 2, 3, 4, 5]  

>>> from pipe import * >>> [1, 2, 3, 4, 5] | add 15 >>> [5, 4, 3, 2, 1] | sort [1, 2, 3, 4, 5]

很简单吧？如果有什么问题，可以随时 help(pipe) 一下，就可以看到完备的帮助了。

接下来我们展示一下组合两个或更多的 pipeable 函数：

view plaincopy to clipboardprint?

   1. >>> [1, 2, 3, 4, 5] | where(lambda x: x % 2) | concat  
   2. '1, 3, 5'  
   3. >>> [1, 2, 3, 4, 5] | where(lambda x: x % 2) | tail(2) | concat  
   4. '3, 5'  
   5. >>> [1, 2, 3, 4, 5] | where(lambda x: x % 2) | tail(2) | select(lambda x: x * x) | concat  
   6. '9, 25'  
   7. >>> [1, 2, 3, 4, 5] | where(lambda x: x % 2) | tail(2) | select(lambda x: x * x) | add  
   8. 34  

>>> [1, 2, 3, 4, 5] | where(lambda x: x % 2) | concat '1, 3, 5' >>> [1, 2, 3, 4, 5] | where(lambda x: x % 2) | tail(2) | concat '3, 5' >>> [1, 2, 3, 4, 5] | where(lambda x: x % 2) | tail(2) | select(lambda x: x * x) | concat '9, 25' >>> [1, 2, 3, 4, 5] | where(lambda x: x % 2) | tail(2) | select(lambda x: x * x) | add 34

因为 Pipe 是惰性求值的，所以我们完成可以弄一个无穷生成器而不用担心内存用完，比如：

view plaincopy to clipboardprint?

   1. >>> def fib():  
   2. ...     x = 1  
   3. ...     yield 1  
   4. ...     y = 1  
   5. ...     yield 1  
   6. ...     while True:  
   7. ...         x = x + y  
   8. ...         yield x  
   9. ...         y = x + y  
  10. ...         yield y  

>>> def fib(): ... x = 1 ... yield 1 ... y = 1 ... yield 1 ... while True: ... x = x + y ... yield x ... y = x + y ... yield y

现在让我们用 fib() 函数来完成一个 http://projecteuler.net 的第 2 题：

    Find the sum of all the even-valued terms in Fibonacci which do not exceed four million.

view plaincopy to clipboardprint?

   1. >>> euler2 = fib() | where(lambda x: x % 2 == 0) | take_while(lambda x: x < 4000000) | add  
   2. >>> assert euler2 == 4613732  

>>> euler2 = fib() | where(lambda x: x % 2 == 0) | take_while(lambda x: x < 4000000) | add >>> assert euler2 == 4613732

怎么样？可读性强吧？漂亮不？

最后，我们来学习一下如何利用 @Pipe decorator 创建一个新的 pipeable 函数：

假定要创建一个函数 yield 它的输入的前 x 个元素

假定要创建一个函数能够用以 (1, 2, 3, 4, 5) | take(2) 语句来获取前两个元素

那么最初的实现可能是这样的：

view plaincopy to clipboardprint?

   1. def take(iterable, qte):  
   2.     for item in iterable:  
   3.         if qte > 0:  
   4.             qte -= 1  
   5.             yield item  
   6.         else:  
   7.             return  

def take(iterable, qte): for item in iterable: if qte > 0: qte -= 1 yield item else: return

现在，你只要把 @Pipe 盖在这个函数上头，这货就是 pipeable 函数了！

====================

鸣谢：

感谢 @yinhm 在 Twitter 上分享《Pipe: Infix syntax for Python》一文，让我知道还有这等神器。

感谢 @kyhpudding 在 Twitter 上分享他的 solo 模块，一个比 pipe 更奇幻的模块，希望我能理解清楚，能够跟大家介绍之。

http://blog.csdn.net/lanphaday/archive/2011/03/29/6287114.aspx
