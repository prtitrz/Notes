Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2010-09-12T01:53:05.843208

====== GIT ======
Created Sunday 12 September 2010

$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
$ git config --global core.editor vim
$ git config --global merge.tool vimdiff
git config --list

先建目录！
git init
.git/info/exclude

检出仓库

执行如下命令以创建一个本地仓库的克隆版本：
git clone /path/to/repository
如果是远端服务器上的仓库，你的命令会是这个样子：
git clone username@host:/path/to/repository


git add .
git commit -m "version"
git commit --amend

推送改动

你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库：
git push origin master
可以把 master 换成你想要推送的任何分支。

如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：
git remote add origin <server>
如此你就能够将你的改动推送到所添加的服务器上去了。


git checkout -b develop
切换回主分支：
git checkout master
再把新建的分支删掉：
git branch -d feature_x
除非你将分支推送到远端仓库，不然该分支就是 不为他人所见的：
git push origin <branch>

更新与合并

要更新你的本地仓库至最新改动，执行：
git pull
以在你的工作目录中 获取（fetch） 并 合并（merge） 远端的改动。
要合并其他分支到你的当前分支（例如 master），执行：
git merge <branch>
两种情况下，git 都会尝试去自动合并改动。不幸的是，自动合并并非次次都能成功，并可能导致 冲突（conflicts）。 这时候就需要你修改这些文件来人肉合并这些 冲突（conflicts） 了。改完之后，你需要执行如下命令以将它们标记为合并成功：
git add <filename>
在合并改动之前，也可以使用如下命令查看：
git diff <source_branch> <target_branch>


标签

在软件发布时创建标签，是被推荐的。这是个旧有概念，在 SVN 中也有。可以执行如下命令以创建一个叫做 1.0.0 的标签：
git tag 1.0.0 1b2e1d63ff
1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符。使用如下命令获取提交 ID：
git log
你也可以用该提交 ID 的少一些的前几位，只要它是唯一的。

替换本地改动

假如你做错事（自然，这是不可能的），你可以使用如下命令替换掉本地改动：
git checkout -- <filename>
此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到缓存区的改动，以及新文件，都不受影响。

假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它：
git fetch origin
git reset --hard origin/master

有用的贴士

内建的图形化 git：
gitd
彩色的 git 输出：
git config color.ui true
显示历史记录时，只显示一行注释信息：
git config format.pretty oneline
交互地添加文件至缓存区：
git add -i


git status

git reset

git remote -v
git remote rm

图形化界面

    GitX (L) (OSX, open source)   http://gitx.laullon.com/
    Tower (OSX)   http://www.git-tower.com/
    Source Tree (OSX, free)   http://www.sourcetreeapp.com/
    GitHub for Mac (OSX, free)   http://mac.github.com/

指南与手册

    Git 社区参考书   http://book.git-scm.com/
    专业 Git   http://progit.org/book/
    如 git 思考   http://think-like-a-git.net/
    GitHub 帮助   http://help.github.com/
    图形化的 Git 指南一则   http://marklodato.github.com/visual-git-guide/index-en.html
http://rogerdudler.github.com/git-guide/index.zh.html


使用git制作补丁时，经常发现补丁需要修改。如果只是最后一次commit需要修改，那就好办，用下面的方法就可以搞定：

$ git reset HEAD^
# edit edit edit
$ git commit -a -s -c ORIG_HEAD
$ git format-patch --subject-prefix="PATCH v2"

但是如果是一系列补丁中的中间几个补丁需要修改，该怎么办呢？

笨办法已经被删掉>.<

Update 1: 非常感谢wangcong的指点！"git rebase -i"可以出色地完成这个任务，方法在man-page里面有详述，见"INTERACTIVE MODE"和"SPLITTING COMMITS"部分。

假设当前所在分支名为"topic"，做了3个补丁，打算提交给邮件列表的时候发现中间一个补丁需要更新，此时使用下列命令：

git rebase -i master

出现编辑窗口如下：

    pick 21732a8 mm/swapping01: new testcase
    pick c3751d1 hugemmap01: clean-up format
    pick d75449c mm/swapping01: change sleep time to 5 sec 

此时需要修改commit c3751d1，则把pick改为edit即可。保存退出后git会rebase到需要修改的commit处停止，此时可以直接修改内容，然后执行：

git add xxx # mark as resolved
git commit --amend

或者

git reset --soft HEAD^
#edit edit edit
git commit -a -s -c ORIG_HEAD

之后执行"git rebase --continue"即可。

突然想起来一年前就请教过wangcong这个问题，只不过当时对git rebase完全不了解，后来就忘了，惭愧-_-|||。

Update 2: 同样感谢Iven的指点，可以去看看他的文章：http://www.kissuki.com/?p=135
