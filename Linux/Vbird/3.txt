Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2010-12-13T01:16:30.088995

====== 3 ======
Created Monday 13 December 2010

pwd -P
mkdir -m 777 -p [[~/.config/awesome/abc]]
echo $PATH
PATH="$PATH":/root   <...............>

[root@www ~]# ls [-aAdfFhilnrRSt]目录名称 
[root@www ~]# ls [--color={never,auto,always}]目录名称 
[root@www ~]# ls [--full- time]目录名称 
选项与参数： 
-a ：全部的档案，连同隐藏档(开头为.的档案)一起列出来(常用) 
-A ：全部的档案，连同隐藏档，但不包括.与..这两个目录
-d ：仅列出目录本身，而不是列出目录内的档案资料(常用) 
-f ：直接列出结果，而不进行排序(ls预设会以档名排序！) 
-F ：根据档案、目录等资讯，给予附加资料结构，例如： *:代表可执行档； /:代表目录； =:代表socket档案； |:代表FIFO档案； 
-h ：将档案容量以人类较易读的方式(例如GB, KB等等)列出来； 
-i ：列出inode号码，inode的意义下一章将会介绍； 
-l ：长资料串列出，包含档案的属性与权限等等资料；(常用) 
-n ：列出UID与GID而非使用者与群组的名称(UID与GID会在帐号管理提到！) 
-r ：将排序结果反向输出，例如：原本档名由小到大，反向则为由大到小； 
-R ：连同子目录内容一起列出来，等于该目录下的所有档案都会显示出来； 
-S ：以档案容量大小排序，而不是用档名排序； 
-t ：依时间排序，而不是用档名。 
--color=never ：不要依据档案特性给予颜色显示； 
--color=always ：显示颜色
--color=auto ：让系统自行依据设定来判断是否给予颜色
--full-time ：以完整时间模式(包含年、月、日、时、分)输出
--time={atime,ctime} ：输出access时间或改变权限属性时间(ctime)而非内容变更时间(modification time) 



 [root@www ~]# cp [-adfilprsu]来源档(source)目标档(destination)
[root@www ~]# cp [options] source1 source2 source3 .... directory [root@www ~]# cp [options] source1 source2 source3 .... directory
選項與參數： 选项与参数： 
  -a ：相当于-pdr的意思，至于pdr请参考下列说明；(常用) 
  -d ：若来源档为连结档的属性(link file)，则复制连结档属性而非档案本身；   
  -l ：进行硬式连结(hard link)的连结档建立，而非复制档案本身； 
  -p ：连同档案的属性一起复制过去，而非使用预设属性(备份常用)； 
  -s ：复制成为符号连结档(symbolic link)，亦即『捷径』档案； 
-i -u -r -f
  最后需要注意的，如果来源档有两个以上，则最后一个目的档一定要是『目录』才行！

-i ：互动模式，在删除前会询问使用者是否动作
-u ：若destination比source旧才更新destination 
  -r ：递回持续复制，用于目录的复制行为；(常用)
  -f ：为强制(force)的意思，若目标档案已经存在且无法开启，则移除后再尝试一次；



basename dirname


# cat  由第一行开始显示档案内容
# tac  从最后一行开始显示，可以看出tac 是cat 的倒着写！
# nl   显示的时候，顺道输出行号！
# more 一页一页的显示档案内容
# less 与more 类似，但是比more 更好的是，他可以往前翻页！
# head 只看头几行
# tail 只看尾巴几行
# od   以二进位的方式读取档案内容！ 

more:
space：代表向下翻一页；
Enter         ：代表向下翻『一行』；
/字串         ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；
:f            ：立刻显示出档名以及目前显示的行数；
q             ：代表立刻离开more ，不再显示该档案内容。
b 或[ctrl]-b ：代表往回翻页，不过这动作只对档案有用，对管线无用。

[root@www ~]# od [-t TYPE] 档案
选项或参数：
-t ：后面可以接各种『类型(TYPE)』的输出，例如：
      a ：利用预设的字元来输出；
      c ：使用 ASCII 字元来输出
      d[size] ：利用十进位(decimal)来输出资料，每个整数占用size bytes ；
      f[size] ：利用浮点数值(floating)来输出资料，每个数占用size bytes ；
      o[size] ：利用八进位(octal)来输出资料，每个整数占用size bytes ；
      x[size] ：利用十六进位(hexadecimal)来输出资料，每个整数占用size bytes ；

每个档案在linux底下都会记录许多的时间参数，其实是有三个主要的变动时间，那么三个时间的意义是什么呢？

    * modification time (mtime) ： 
当该档案的『内容资料』变更时，就会更新这个时间！ 内容资料指的是档案的内容，而不是档案的属性或权限

    * status time (ctime) ： 
当该档案的『状态(status)』改变时，就会更新这个时间，举例来说，像是权限与属性被更改了，都会更新这个时间啊。

    * access time (atime) ： 
当『该档案的内容被取用』时，就会更新这个读取时间(access)。 举例来说，我们使用cat去读取/etc/man.config ，就会更新该档案的atime了。 

touch 修改文件时间

chattr lsattr umask(0022....被拿掉了2权限，第一个0为特殊用户)

[root@www ~]# chattr [+-=][ASacdistu] 档案或目录名称
选项与参数：
+ ：增加某一个特殊参数，其他原本存在参数则不动。
- ：移除某一个特殊参数，其他原本存在参数则不动。
= ：设定一定，且仅有后面接的参数

A ：当设定了A 这个属性时，若你有存取此档案(或目录)时，他的存取时间atime
     将不会被修改，可避免I/O较慢的机器过度的存取磁碟。这对速度较慢的电脑有帮助
S ：一般档案是非同步写入磁碟的(原理请参考第五章sync的说明)，如果加上S 这个
     属性时，当你进行任何档案的修改，该更动会『同步』写入磁碟中。
a ：当设定a 之后，这个档案将只能增加资料，而不能删除也不能修改资料，只有root
     才能设定这个属性。
c ：这个属性设定之后，将会自动的将此档案『压缩』，在读取的时候将会自动解压缩，
     但是在储存的时候，将会先进行压缩后再储存(看来对于大档案似乎蛮有用的！)
d ：当dump 程序被执行的时候，设定d 属性将可使该档案(或目录)不会被dump 备份
i ：这个 i 可就很厉害了！他可以让一个档案『不能被删除、改名、设定连结也无法
     写入或新增资料！ 』对于系统安全性有相当大的助益！只有 root 能设定此属性
s ：当档案设定了s 属性时，如果这个档案被删除，他将会被完全的移除出这个硬碟
     空间，所以如果误删了，完全无法救回来了喔！
u ：与s 相反的，当使用u 来设定档案时，如果该档案被删除了，则资料内容其实还
     存在磁碟中，可以使用来救援该档案喔！
注意：属性设定常见的是a 与i 的设定值，而且很多设定值必须要身为root 才能设定

[root@www ~]# lsattr [-adR] 档案或目录
选项与参数：
-a ：将隐藏档的属性也秀出来；
-d ：如果接的是目录，仅列出目录本身的属性而非目录内的档名；
-R ：连同子目录的资料也一并列出来！

s：
当s 标志在档案拥有者的x 项目为SUID（4）
    * SUID 权限仅对二进位程式(binary program)有效；
    * 执行者对于该程式需要具有x 的可执行权限；
    * 本权限仅在执行该程式的过程中有效(run-time)；
    * 执行者将具有该程式拥有者(owner) 的权限。
s 在群组的x 时则称为Set GID   （2）
t SBIT（1）
SUID 不是用在目录上，而SBIT 不是用在档案上

locate updatedb
-r rexgep

[root@www ~]# find [PATH] [option] [action]
选项与参数：
1. 与时间有关的选项：共有-atime, -ctime 与-mtime ，以-mtime 说明
   -mtime n ：n 为数字，意义为在n 天之前的『一天之内』被更动过内容的档案；
   -mtime +n ：列出在n 天之前(不含n 天本身)被更动过内容的档案档名；
   -mtime -n ：列出在n 天之内(含n 天本身)被更动过内容的档案档名。
   -newer file ：file 为一个存在的档案，列出比file 还要新的档案档名

范例一：将过去系统上面24 小时内有更动过内容(mtime) 的档案列出
[root@www ~]# find / -mtime 0
# 那个 0 是重点！ 0 代表目前的时间，所以，从现在开始到24 小时前，
# 有变动过内容的档案都会被列出来！那如果是三天前的 24 小时内？
# find / -mtime 3 有变动过的档案都被列出的意思！

如果我想要找出『4天内被更动过的档案档名』呢？那可以使用『 find /var -mtime -4 』。那如果是『4天前的那一天』就用『 find /var -mtime 4 』。
    * +4代表大于等于5天前的档名：ex> find /var -mtime +4
    * -4代表小于等于4天内的档案档名：ex> find /var -mtime -4
    * 4则是代表4-5那一天的档案档名：ex> find /var -mtime 4
2. 与使用者或群组名称有关的参数：
   -uid n ：n 为数字，这个数字是使用者的帐号ID，亦即UID ，这个UID 是记录在
            /etc/passwd 里面与帐号名称对应的数字。这方面我们会在第四篇介绍。
   -gid n ：n 为数字，这个数字是群组名称的ID，亦即GID，这个GID 记录在
            /etc/group，相关的介绍我们会第四篇说明～
   -user name ：name 为使用者帐号名称喔！例如 dmtsai
   -group name：name 为群组名称喔，例如users ；
   -nouser ：寻找档案的拥有者不存在/etc/passwd 的人！
   -nogroup ：寻找档案的拥有群组不存在于/etc/group 的档案！
3. 与档案权限及名称有关的参数：
   -name filename：搜寻档案名称为filename 的档案；
   -size [+-]SIZE：搜寻比SIZE 还要大(+)或小(-)的档案。这个 SIZE 的规格有：
                   c: 代表 byte， k: 代表 1024bytes。所以，要找比 50KB
                   还要大的档案，就是『 -size +50k 』
   -type TYPE ：搜寻档案的类型为TYPE 的，类型主要有：一般正规档案(f),
                   装置档案(b, c), 目录(d), 连结档(l), socket (s),
                   及 FIFO (p) 等属性。
   -perm mode ：搜寻档案权限『刚好等于』 mode 的档案，这个mode 为类似chmod
                 的属性值，举例来说， -rwsr-xr-x 的属性为4755 ！
   -perm -mode ：搜寻档案权限『必须要全部囊括mode 的权限』的档案，举例来说，
                 我们要搜寻-rwxr--r-- ，亦即0744 的档案，使用-perm -0744，
                 当一个档案的权限为-rwsr-xr-x ，亦即4755 时，也会被列出来，
                 因为-rwsr-xr-x 的属性已经囊括了-rwxr--r-- 的属性了。
   -perm +mode ：搜寻档案权限『包含任一mode 的权限』的档案，举例来说，我们搜寻
                 -rwxr-xr-x ，亦即-perm +755 时，但一个档案属性为-rw-------
                 也会被列出来，因为他有-rw.... 的属性存在！
4. 额外可进行的动作：
   -exec command ：command 为其他指令，-exec 后面可再接额外的指令来处理搜寻到
                   的结果。
   -print ：将结果列印到萤幕上，这个动作是预设动作！

范例八：将上个范例找到的档案使用ls -l 列出来～
[root@www ~]# find / -perm +7000 -exec ls -l {} \;
# 注意到，那个-exec 后面的ls -l 就是额外的指令，指令不支援命令别名，
# 所以仅能使用ls -l 不可以使用ll 喔！注意注意！
    * {} 代表的是『由find 找到的内容』，如上图所示，find 的结果会被放置到{} 位置中；
    * -exec 一直到\; 是关键字，代表find 额外动作的开始(-exec) 到结束(\;) ，在这中间的就是find 指令内的额外动作。在本例中就是『 ls -l {} 』啰！
    * 因为『 ; 』在bash 环境下是有特殊意义的，因此利用反斜线来跳脱。
