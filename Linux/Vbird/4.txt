Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2010-12-15T00:49:01.495273

====== 4 ======
Created Wednesday 15 December 2010

磁碟的物理组成主要有：

* 圆形的磁碟盘(主要记录资料的部分)；
* 机械手臂，与在机械手臂上的磁碟读取头(可读写磁碟盘上的资料)；
* 主轴马达，可以转动磁碟盘，让机械手臂的读取头在磁碟盘上读写资料。

从上面我们知道资料储存与读取的重点在于磁碟盘，而磁碟盘上的物理组成则为(假设此磁碟为单碟片， 磁碟盘图示请参考第三章图2.2.1的示意)：

* 磁区(Sector)为最小的物理储存单位，每个磁区为512 bytes；
* 将磁区组成一个圆，那就是磁柱(Cylinder)，磁柱是分割槽(partition)的最小单位；
* 第一个磁区最重要，里面有：(1)主要开机区(Master boot record, MBR)及分割表(partition table)， 其中MBR 占有446 bytes，而partition table 则占有64 bytes。

各种介面的磁碟在Linux中的档案名称分别为：

* /dev/sd[ap][1-15]：为SCSI, SATA, USB, Flash随身碟等介面的磁碟档名；
* /dev/hd[ad][1-63]：为IDE 介面的磁碟档名；

每个inode 与block 都有编号，至于这三个资料的意义可以简略说明如下：

* superblock：记录此filesystem 的整体资讯，包括inode/block的总量、使用量、剩余量， 以及档案系统的格式与相关资讯等；
* inode：记录档案的属性，一个档案占用一个inode，同时记录此档案的资料所在的block 号码；
* block：实际记录档案的内容，若档案太大时，会占用多个block 。

在整体的规划当中，档案系统最前面有一个开机磁区(boot sector)，这个开机磁区可以安装开机管理程式， 这是个非常重要的设计，因为如此一来我们就能够将不同的开机管理程式安装到个别的档案系统最前端，而不用覆盖整颗硬碟唯一的MBR， 这样也才能够制作出多重开机的环境

基本上，inode 记录的档案资料至少有底下这些：(注4)

* 该档案的存取模式(read/write/excute)；
* 该档案的拥有者与群组(owner/group)；
* 该档案的容量；
* 该档案建立或状态改变的时间(ctime)；
* 最近一次的读取时间(atime)；
* 最近修改的时间(mtime)；
* 定义档案特性的旗标(flag)，如SetUID...；
* 该档案真正内容的指向 (pointer)； 

inode 的数量与大小也是在格式化时就已经固定了，除此之外inode 还有些什么特色呢？

* 每个 inode 大小均固定为 128 bytes；
* 每个档案都仅会占用一个inode 而已；
* 承上，因此档案系统能够建立的档案数量与inode 的数量有关；
* 系统读取档案时需要先找到inode，并分析inode 所记录的权限与使用者是否符合，若符合才能够开始实际读取block 的内容。 

这样子inode 能够指定多少个block 呢？我们以较小的1K block 来说明好了，可以指定的情况如下：

	* 12 个直接指向： 12*1K=12K
      由于是直接指向，所以总共可记录12 笔记录，因此总额大小为如上所示；

* 间接： 256*1K=256K
      

==== 每笔block 号码的记录会花去4bytes ====
，因此1K 的大小能够记录256 笔记录，因此一个间接可以记录的档案大小如上；

	* 双间接： 256*256*1K=2562K
      第一层block 会指定256 个第二层，每个第二层可以指定256 个号码，因此总额大小如上；

	* 三间接： 256*256*256*1K=2563K
      第一层block 会指定256 个第二层，每个第二层可以指定256 个第三层，每个第三层可以指定256 个号码，因此总额大小如上；

* 总额：将直接、间接、双间接、三间接加总，得到12 + 256 + 256*256 + 256*256*256 (K) = 16GB

此时我们知道当档案系统将block 格式化为1K 大小时，能够容纳的最大档案为16GB，比较一下档案系统限制表的结果可发现是一致的！但这个方法不能用在2K 及4K block 大小的计算中， 因为大于2K 的block 将会受到Ext2 档案系统本身的限制，所以计算的结果会不太符合之故。

Superblock 是记录整个filesystem 相关资讯的地方， 没有Superblock ，就没有这个filesystem 了。他记录的资讯主要有：

* block 与 inode 的总量；
* 未使用与已使用的inode / block 数量；
* block 与inode 的大小(block 为1, 2, 4K，inode 为128 bytes)；
* filesystem 的挂载时间、最近一次写入资料的时间、最近一次检验磁碟(fsck) 的时间等档案系统的相关资讯；
* 一个valid bit 数值，若此档案系统已被挂载，则valid bit 为0 ，若未被挂载，则valid bit 为1 。 


* Filesystem Description (档案系统描述说明)

* block bitmap (区块对照表)

如果你想要新增档案时总会用到block 吧！那你要使用哪个 block 来记录呢？当然是选择『空的block 』来记录新档案的资料啰。那你怎么知道哪个 block 是空的？这就得要透过 block bitmap 的辅助了。从block bitmap 当中可以知道哪些block 是空的，因此我们的系统就能够很快速的找到可使用的空间来处置档案啰。 
	* inode bitmap (inode 对照表) 

[root@www ~]# dumpe2fs [-bh] 装置档名
选项与参数：
-b ：列出保留为坏轨的部分(一般用不到吧！？)
-h ：仅列出superblock 的资料，不会列出其他的区段内容！   

* 档案：

当我们在Linux 下的ext2 建立一个一般档案时， ext2 会分配一个inode 与相对于该档案大小的block 数量给该档案。例如：假设我的一个block 为4 Kbytes ，而我要建立一个100 KBytes 的档案，那么linux 将分配一个inode 与25 个block 来储存该档案！但同时请注意，由于inode 仅有12 个直接指向，因此还要多一个block 来作为区块号码的记录

Linux 支援的档案系统有哪些，可以察看底下这个目录： 
ls -l /lib/modules/$(uname -r)/kernel/fs 

[root@www ~]# df [-ahikHTm] [目录或档名]
选项与参数：
-a ：列出所有的档案系统，包括系统特有的/proc 等档案系统；
-k ：以KBytes 的容量显示各档案系统；
-m ：以MBytes 的容量显示各档案系统；
-h ：以人们较易阅读的GBytes, MBytes, KBytes 等格式自行显示；
-H ：以M=1000K 取代M=1024K 的进位方式；
-T ：连同该partition 的filesystem 名称(例如ext3) 也列出；
-i ：不用硬碟容量，而以inode 的数量来显示 

[root@www ~]# du [-ahskm] 档案或目录名称
选项与参数：
-a ：列出所有的档案与目录容量，因为预设仅统计目录底下的档案量而已。
-h ：以人们较易读的容量格式(G/M) 显示；
-s ：列出总量而已，而不列出每个各别的目录占用容量；
-S ：不包括子目录下的总计，与-s 有点差别。
-k ：以 KBytes 列出容量显示；
-m ：以 MBytes 列出容量显示； 

因为箭头(-->)右边的档名『/etc/crontab』总共有12 个英文，每个英文占用1 个byes ，所以档案大小就是12bytes了！ 

[root@www ~]# ln [-sf] 来源档 目标档
选项与参数：
-s ：如果不加任何参数就进行连结，那就是hard link，至于-s 就是symbolic link
-f ：如果目标档存在时，就主动的将目标档直接移除后再建立！

当我们建立一个新的目录时， 『新的目录的link 数为2 ，而上层目录的link 数则会增加1 』

fdisk部分见[[:Storage:fdisk|fdisk]]
[root@www ~]# partprobe <==强制让核心重新捉一次partition table 

[root@www ~]# mkfs [-t 档案系统格式] 装置档名
选项与参数：
-t ：可以接档案系统格式，例如ext3, ext2, vfat 等(系统有支援才会生效) 
[root@www ~]# mkfs[tab][tab]
mkfs mkfs.cramfs mkfs.ext2 mkfs.ext3 mkfs.msdos mkfs.vfat
mkfs 其实是个综合指令而已，事实上如同上表所示，当我们使用『 mkfs -t ext3 ...』时， 系统会去呼叫mkfs.ext3 这个指令来进行格式化的动作

[root@www ~]# mke2fs [-b block大小] [-i block大小] [-L 标头] [-cj] 装置
选项与参数：
-b ：可以设定每个block 的大小，目前支援1024, 2048, 4096 bytes 三种；
-i ：多少容量给予一个 inode 呢？
-c ：检查磁碟错误，仅下达一次-c 时，会进行快速读取测试；
      如果下达两次-c -c 的话，会测试读写(read-write)，会很慢～
-L ：后面可以接标头名称(Label)，这个label 是有用的喔！ e2label指令介绍会谈到～
-j ：本来mke2fs 是EXT2 ，加上-j 后，会主动加入journal 而成为EXT3。
如果沒有特殊需求的話，使用『 mkfs -t ext3....』

[root@www ~]# fsck [-t 档案系统] [-ACay] 装置名称
选项与参数：
-t ：如同mkfs 一样，fsck 也是个综合软体而已！因此我们同样需要指定档案系统。
      不过由于现今的Linux 太聪明了，他会自动的透过superblock 去分辨档案系统，
      因此通常可以不需要这个选项的啰！请看后续的范例说明。
-A ：依据/etc/fstab 的内容，将需要的装置扫瞄一次。 /etc/fstab 于下一小节说明，
      通常开机过程中就会执行此一指令了。
-a ：自动修复检查到的有问题的磁区，所以你不用一直按y 啰！
-y ：与-a 类似，但是某些filesystem 仅支援-y 这个参数！
-C ：可以在检验的过程当中，使用一个长条图来显示目前的进度！

EXT2/EXT3 的额外选项功能：(e2fsck 这支指令所提供)
-f ：强制检查！一般来说，如果fsck 没有发现任何unclean 的旗标，不会主动进入
      细部检查的，如果您想要强制fsck 进入细部检查，就得加上-f 旗标啰！
-D ：针对档案系统下的目录进行最佳化配置。 
[root@www ~]# fsck[tab][tab]
fsck fsck.cramfs fsck.ext2 fsck.ext3 fsck.msdos fsck.vfat
这是用来检查与修正档案系统错误的指令。注意：通常只有身为root 且你的档案系统有问题的时候才使用这个指令，否则在正常状况下使用此一指令， 可能会造成对系统的危害！通常使用这个指令的场合都是在系统出现极大的问题，导致你在Linux 开机的时候得进入单人单机模式下进行维护的行为时，才必须使用此一指令！ 
另外，我们的系统实际执行的fsck 指令，其实是呼叫e2fsck 这个软体啦！可以man e2fsck 找到更多的选项辅助

[root@www ~]# badblocks -[svw] 装置名称
选项与参数：
-s ：在萤幕上列出进度
-v ：可以在萤幕上看到进度
-w ：使用写入的方式来测试，建议不要使用此一参数，尤其是待检查的装置已有档案时！
fsck 是用来检验档案系统是否出错，至于badblocks 则是用来检查硬碟或软碟磁区有没有坏轨的指令！由于这个指令其实可以透过『 mke2fs -c 装置档名』在进行格式化的时候处理磁碟表面的读取测试， 因此目前大多不使用这个指令



	* 单一档案系统不应该被重复挂载在不同的挂载点(目录)中；
	* 单一目录不应该重复挂载多个档案系统；
	* 要作为挂载点的目录，理论上应该都是空目录才是。

尤其是上述的后两点！如果你要用来挂载的目录里面并不是空的，那么挂载了档案系统之后，原目录下的东西就会暂时的消失。举个例子来说，假设你的/home 原本与根目录(/) 在同一个档案系统中，底下原本就有/home/test 与/home/vbird 两个目录。然后你想要加入新的硬碟，并且直接挂载/home 底下，那么当你挂载上新的分割槽时，则/home 目录显示的是新分割槽内的资料，至于原先的test 与vbird这两个目录就会暂时的被隐藏掉了！注意喔！并不是被覆盖掉， 而是暂时的隐藏了起来，等到新分割槽被卸载之后，则/home 原本的内容就会再次的跑出来啦！ 
[root@www ~]# mount -a
[root@www ~]# mount [-l]
[root@www ~]# mount [-t 档案系统] [-L Label名] [-o 额外选项] \
 [-n] 装置档名 挂载点
选项与参数：
-a ：依照设定档/etc/fstab 的资料将所有未挂载的磁碟都挂载上来
-l ：单纯的输入mount 会显示目前挂载的资讯。加上 -l 可增列 Label 名称！
-t ：与mkfs 的选项非常类似的，可以加上档案系统种类来指定欲挂载的类型。
      常见的Linux 支援类型有：ext2, ext3, vfat, reiserfs, iso9660(光碟格式),
      nfs, cifs, smbfs(此三种为网路档案系统类型)
-n ：在预设的情况下，系统会将实际挂载的情况即时写入/etc/mtab 中，以利其他程式
      的运作。但在某些情况下(例如单人维护模式)为了避免问题，会刻意不写入。
      此时就得要使用这个 -n 的选项了。
-L ：系统除了利用装置档名(例如/dev/hdc6) 之外，还可以利用档案系统的标头名称
      (Label)来进行挂载。最好为你的档案系统取一个独一无二的名称吧！
-o ：后面可以接一些挂载时额外加上的参数！比方说帐号、密码、读写权限等：
      ro, rw: 挂载档案系统成为唯读(ro) 或可读写(rw)
      async, sync: 此档案系统是否使用同步写入(sync) 或非同步(async) 的
                    记忆体机制，请参考档案系统运作方式。预设为 async。
      auto, noauto: 允许此partition 被以mount -a 自动挂载(auto)
      dev, nodev: 是否允许此partition 上，可建立装置档案？ dev 为可允许
      suid, nosuid: 是否允许此partition 含有suid/sgid 的档案格式？
      exec, noexec: 是否允许此partition 上拥有可执行binary 档案？
      user, nouser: 是否允许此partition 让任何使用者执行mount ？一般来说，
                    mount 仅有root 可以进行，但下达user 参数，则可让
                    一般user 也能够对此partition 进行mount 。
      defaults: 预设值为：rw, suid, dev, exec, auto, nouser, and async
      remount: 重新挂载，这在系统出错，或重新更新参数时，很有用！ 

其实利用『mount 装置档名挂载点』就能够顺利的挂载了！真是方便啊！为什么可以这么方便呢(甚至不需要使用-t 这个选项)？由于档案系统几乎都有superblock ， 我们的Linux 可以透过分析superblock 搭配Linux 自己的驱动程式去测试挂载， 如果成功的套和了，就立刻自动的使用该类型的档案系统挂载起来啊！那么系统有没有指定哪些类型的filesystem 才需要进行上述的挂载测试呢？主要是参考底下这两个档案：

	* /etc/filesystems：系统指定的测试挂载档案系统类型；
	* /proc/filesystems：Linux系统已经载入的档案系统类型。 

光盘 mount -t iso9660
[root@www ~]# mount -t vfat -o iocharset=cp950 /dev/sda1 /mnt/flash
如果带有中文档名的资料，那么可以在挂载时指定一下挂载档案系统所使用的语系资料。在man mount 找到vfat 档案格式当中可以使用iocharset 来指定语系，而中文语系是cp950 

范例六：将/ 重新挂载，并加入参数为rw 与auto
[root@www ~]# mount -o remount,rw,auto / 

另外，我们也可以利用mount 来将某个目录挂载到另外一个目录去喔！这并不是挂载档案系统，而是额外挂载某个目录的方法！虽然底下的方法也可以使用symbolic link 来连结，不过在某些不支援符号连结的程式运作中，还是得要透过这样的方法才行。

范例七：将/home 这个目录暂时挂载到/mnt/home 底下：
[root@www ~]# mkdir /mnt/home
[root@www ~]# mount --bind /home /mnt/home
[root@www ~]# ls -lid /home/ /mnt/home
2 drwxr-xr-x 6 root root 4096 Sep 29 02:21 /home/
2 drwxr-xr-x 6 root root 4096 Sep 29 02:21 /mnt/home

[root@www ~]# mount -l
/home on /mnt/home type none (rw,bind)

看起来，其实两者连结到同一个inode 嘛！ ^_^ 没错啦！透过这个mount --bind 的功能， 您可以将某个目录挂载到其他目录去喔！而并不是整块 filesystem 的啦！所以从此进入/mnt/home 就是进入/home 的意思喔！ 

	* umount (将装置档案卸载)

[root@www ~]# umount [-fn] 装置档名或挂载点
选项与参数：
-f ：强制卸载！可用在类似网路档案系统(NFS) 无法读取到的情况下；
-n ：不更新 /etc/mtab 情况下卸载。 
[root@www ~]# umount /mnt/home <==一定要用挂载点！因为挂载的是目录 

	* 使用 Label name 进行挂载的方法

除了磁碟的装置档名之外，其实我们可以使用档案系统的标头(label)名称来挂载喔！举例来说，我们刚刚卸载的/dev/hdc6 标头名称是『vbird_logical』，你也可以使用dumpe2fs 这个指令来查询一下啦！然后就这样做即可：

范例九：找出/dev/hdc6 的label name，并用label 挂载到/mnt/hdc6
[root@www ~]# dumpe2fs -h /dev/hdc6
Filesystem volume name: vbird_logical
.....底下省略.....
# 找到啦！标头名称为 vbird_logical 啰！
[root@www ~]# mount -L "vbird_logical" /mnt/hdc6
这种挂载的方法有一个很大的好处：『系统不必知道该档案系统所在的介面与磁碟档名！ 』

[root@www ~]# mknod 装置档名[bcp] [Major] [Minor]
选项与参数：
装置种类：
   b ：设定装置名称成为一个周边储存设备档案，例如硬碟等；
   c ：设定装置名称成为一个周边输入设备档案，例如滑鼠/键盘等；
   p ：设定装置名称成为一个FIFO 档案；
Major ：主要装置代码；
Minor ：次要装置代码；

范例一：由上述的介绍我们知道/dev/hdc10 装置代码22, 10，请建立并查阅此装置
[root@www ~]# mknod /dev/hdc10 b 22 10
[root@www ~]# ll /dev/hdc10
brw-r--r-- 1 root root 22, 10 Oct 26 23:57 /dev/hdc10
# 上面那个22 与10 是有意义的，不要随意设定啊！

范例二：建立一个FIFO 档案，档名为/tmp/testpipe
[root@www ~]# mknod /tmp/testpipe p
[root@www ~]# ll /tmp/testpipe
prw-r--r-- 1 root root 0 Oct 27 00:00 /tmp/testpipe
# 注意啊！这个档案可不是一般档案，不可以随便就放在这里！
# 测试完毕之后请删除这个档案吧！看一下这个档案的类型！是 p 喔！

[root@www ~]# e2label 装置名称新的Label名称

范例一：将/dev/hdc6 的标头改成my_test 并观察是否修改成功？
[root@www ~]# dumpe2fs -h /dev/hdc6
Filesystem volume name: vbird_logical <==原本的标头名称
.....底下省略.....

[root@www ~]# e2label /dev/hdc6 "my_test"
[root@www ~]# dumpe2fs -h /dev/hdc6
Filesystem volume name: my_test <==改过来啦！
.....底下省略..... 

[root@www ~]# tune2fs [-jlL] 装置代号
选项与参数：
-l ：类似dumpe2fs -h 的功能～将superblock 内的资料读出来～
-j ：将ext2 的filesystem 转换为ext3 的档案系统；
-L ：类似e2label 的功能，可以修改filesystem 的Label 喔！ 

hdparm....鸡肋。略。。主要ide加测试硬碟的实际存取效能

/etc/fstab 
	* 第一栏：磁碟装置档名或该装置的Label： 
	* 第二栏：挂载点 (mount point)： 
	* 第三栏：磁碟分割槽的档案系统： 
	* 第四栏：档案系统参数： 
	* 第五栏：能否被dump 备份指令作用：
dump 是一个用来做为备份的指令(我们会在第二十五章备份策略中谈到这个指令)， 我们可以透过fstab 指定哪个档案系统必须要进行dump 备份！ 0 代表不要做dump 备份， 1 代表要每天进行dump 的动作。 2 也代表其他不定日期的dump 备份动作， 通常这个数值不是0 就是1
	* 第六栏：是否以 fsck 检验磁区：
开机的过程中，系统预设会以fsck 检验我们的filesystem 是否完整(clean)。不过，某些filesystem 是不需要检验的，例如记忆体置换空间(swap) ，或者是特殊档案系统例如/proc 与/sys 等等。所以，在这个栏位中，我们可以设定是否要以fsck 检验该filesystem 喔。 0 是不要检验， 1 表示最早检验(一般只有根目录会设定为1)， 2 也是要检验，不过1 会比较早被检验啦！一般来说，根目录设定为1 ，其他的要检验的filesystem 都设定为2 就好了。


例题：
假设我们要将/dev/hdc6 每次开机都自动挂载到/mnt/hdc6 ，该如何进行？
答：
首先，请用nano 将底下这一行写入/etc/fstab 当中；

[root@www ~]# nano /etc/fstab
/dev/hdc6 /mnt/hdc6 ext3 defaults 1 2

再来看看/dev/hdc6 是否已经挂载，如果挂载了，请务必卸载再说！

[root@www ~]# df
Filesystem 1K-blocks Used Available Use% Mounted on
/dev/hdc6 1976312 42072 1833836 3% /mnt/hdc6
# 竟然不知道何时被挂载了？赶紧给他卸载先！

[root@www ~]# umount /dev/hdc6

最后测试一下刚刚我们写入/etc/fstab 的语法有没有错误！这点很重要！因为这个档案如果写错了，则你的Linux 很可能将无法顺利开机完成！所以请务必要测试测试喔！

[root@www ~]# mount -a
[root@www ~]# df

最终有看到/dev/hdc6 被挂载起来的资讯才是成功的挂载了！而且以后每次开机都会顺利的将此档案系统挂载起来的！由于这个范例仅是测试而已，请务必回到/etc/fstab 当中，将上述这行给他注解或者是删除掉！

[root@www ~]# nano /etc/fstab
# /dev/hdc6 /mnt/hdc6 ext3 defaults 1 2


/etc/fstab 是开机时的设定档，不过，实际filesystem 的挂载是记录到/etc/mtab 与/proc/mounts 这两个档案当中的。每次我们在更动filesystem 的挂载时，也会同时更动这两个档案喔！但是，万一发生您在/etc/fstab 输入的资料错误，导致无法顺利开机成功，而进入单人维护模式当中，那时候的/ 可是read only 的状态，当然您就无法修改/etc/fstab ，也无法更新/etc/mtab 啰～那怎么办？没关系，可以利用底下这一招：

[root@www ~]# mount -n -o remount,rw / 


iso挂载 -o loop

swap partition 略
mkswap free swapon（-s） swapoff

boot sector 与superblock 的关系 
    * block 为 1024 bytes (1K) 时：
如果block 大小刚好是1024 的话，那么boot sector 与superblock 各会占用掉一个block
    * block 大于 1024 bytes (2K, 4K) 时：
如果block 大于1024 的话，那么superblock 将会在0 号

fdisk 却无法支援到高于2TB 以上的分割槽
[root@www ~]# parted [装置] [指令 [参数]]
选项与参数：
指令功能：
新增分割：mkpart [primary|logical|extended] [ext3|vfat] 开始结束
分割表 ：print
删除分割：rm [partition] 
